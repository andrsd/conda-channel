{% set version = "20.1.3" %}

{% if sys_abi is undefined %}
{% set sys_abi = "dummy" %}
{% set hardening = "dummy" %}
{% endif %}

package:
  name: libcxx_and_libcxxabi
  version: {{ version }}

source:
  - url: https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-{{ version.replace(".rc", "-rc") }}.tar.gz
    sha256: b40c0d185b98c2ee3c0cb2f14cde65a06008b33dfb471cc7ad868f8ca3f7f897
    patches:
      # disable feature that requires up-to-date libcxxabi, which we don't ship
      - files/0002-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch
      # work around https://github.com/llvm/llvm-project/issues/90332
      - files/0003-Work-around-stray-nostdlib-flags-causing-errors-with.patch
      # allow chrono implementation to work on osx
      - files/0004-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch

build:
  number: 0
  skip: true  # [win]
  skip: true  # [ppc64le or aarch64]

requirements:
  build:
    - cmake
    - ninja
    - {{ compiler('cxx') }}
    - {{ compiler('c') }}
    - python >3               # [not osx]

outputs:
  - name: libcxx-devel
    build:
      string: h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}        # [hardening == "none"]
      string: debug_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [hardening == "debug"]
      run_exports:                                      # [hardening == "debug"]
        # packages built with hardened lib must not be installable without extra label
        - libcxx =*=debug*                              # [hardening == "debug"]
    files:
      - include/c++                 # [unix]
      # for C++20 modules, which are installed into $PREFIX/share/libc++
      - share/libc++/*              # [unix]
      - Library/include/c++         # [win]
    requirements:
      host:
        - {{ pin_subpackage("libcxx", exact=True) }}
      run:
        # re-enable this for osx once chrono implementation is in shared library
        - tzdata  # [linux]
        - {{ pin_subpackage("libcxx", max_pin=None) }}

    test:
      requires:
        - clang                  # [osx]
        - clangxx
        - ld64                                      # [osx]
        - cctools                                   # [osx]
        - llvm-tools                                # [osx]
        - {{ compiler('cxx') }}                     # [not osx]
      files:
        - test_sources
        - compile_test.sh   # [unix]
        - compile_test.bat  # [win]
      commands:
        # Dummy var for different hashes
        - echo {{ dummy_var }}                                    # [osx]
        - if not exist %LIBRARY_INC%\\c++\\v1\\iterator exit 1    # [win]
        - test -f $PREFIX/include/c++/v1/iterator                 # [unix]

        # !!!!!!!!!!!! README !!!!!!!!!!!!!!!!!!
        # we do not ship libcxxabi on OSX - this breaks exception passing
        - if [ -f $PREFIX/lib/libc++abi.dylib ]; then exit 1; fi  # [osx]
        - test -f $PREFIX/lib/libc++abi.so                        # [linux]

        # for full chrono support, libcxx needs leap-seconds.list, which
        # isn't shipped macos-14 image
        - ls -lL /usr/share/zoneinfo
        # This check is intended to start failing once an image starts shipping
        # that file, so we can re-enable the leapsecond portion of the tzdb-tests
        - if [ 0 -ne $(ls -lL /usr/share/zoneinfo | grep leap-seconds.list | wc -l) ]; then exit 1; fi  # [osx]

        - bash compile_test.sh                                    # [unix]
        - compile_test.bat                                        # [win]

  - name: libcxx
    build:
      string: h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}        # [hardening == "none"]
      string: debug_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [hardening == "debug"]
      run_exports:                                      # [hardening == "debug"]
        # packages built with hardened lib must not be installable without extra label
        - libcxx =*=debug*                              # [hardening == "debug"]
      ignore_run_exports_from:
        # we want to ignore libstdcxx, but not libgcc; the latter also comes in through
        # compiler('c'), and conda keeps that despite ignoring the cxx run-exports
        - {{ compiler('cxx') }}
    files:
      - lib/libc++.so               # [linux]
      - lib/libc++.so.*             # [linux]
      - lib/libc++.dylib            # [osx]
      - lib/libc++.*.dylib          # [osx]
      - Library/bin/c++*.dll        # [win]
      # static libs for cross-compilation, due to lack of host-exports
      - lib/libc++.a                # [unix]
      - lib/libc++experimental.*    # [unix]
      - Library/lib/c++*.lib        # [win]
      - Library/lib/libc++*.lib     # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
      host:
        - {{ pin_subpackage("libcxxabi", exact=True) }}    # [linux]
      run:
        - {{ pin_subpackage("libcxxabi", exact=True) }}    # [linux]
      run_constrained:
        - sysroot_{{ target_platform }} >={{ c_stdlib_version }}    # [linux]
    test:
      commands:
        # presence of shared & static libraries
        - test -f $PREFIX/lib/libc++.so                 # [linux]
        - test -f $PREFIX/lib/libc++.dylib              # [osx]
        - test -f $PREFIX/lib/libc++.a                  # [unix]
        - test -f $PREFIX/lib/libc++experimental.a      # [unix]
        # absence of headers
        - test ! -d $PREFIX/include/c++                 # [unix]

  - name: libcxxabi
    build:
      skip: true  # [not linux]
      # even though libcxxabi shouldn't be affected, distinguish builds
      string: h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}        # [hardening == "none"]
      string: debug_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [hardening == "debug"]
    files:
      - lib/libc++abi.*
    requirements:
      build:
        # for run-exports
        - {{ compiler('c') }}
      run_constrained:
        - libcxx {{ version }}.*
    test:
      commands:
        - test -f $PREFIX/lib/libc++abi.so  # [linux]

about:
  home: http://libcxx.llvm.org/
  license: Apache-2.0 WITH LLVM-exception
  license_file: libcxx/LICENSE.TXT
  license_family: Apache
  summary: LLVM C++ standard library
  dev_url: https://github.com/llvm/llvm-project

extra:
  recipe-maintainers:
    - andrsd
  feedstock-name: libcxx

{% set version = "1.11.3" %}
{% set build = 1 %}

package:
  name: scipy-split
  version: {{ version }}

# use 'python_impl' in meta.yaml so it gets picked up by rendering
# [python_impl == "pypy"]

source:
  # The sdist distributed by scipy contains pre-compiled pythran sources,
  # as well as the relevant submodules; by taking the tarball from github
  # we can compile pythran ourselves (or not), but manually need to include
  # the submodules (not in tarball due to dear-github/dear-github#214)
  - url: https://github.com/scipy/scipy/archive/refs/tags/v{{ version }}.tar.gz
    sha256: 86712f1dff2cf674d823ad5489db54928b44149f76d7ba891ad19a6ae118abcf
    patches:
      - patches/0001-remove-comment-that-breaks-parsing.patch
  # https://github.com/scipy/scipy/tree/v{{ version }}/scipy/_lib
  - git_url: https://github.com/boostorg/math.git
    git_rev: 298a243ccd3639b6eaa59bcdab7ab9d5f008fb36
    folder: scipy/_lib/boost_math
  - git_url: https://github.com/scipy/highs.git
    git_rev: 4a122958a82e67e725d08153e099efe4dad099a2
    folder: scipy/_lib/highs
  - git_url: https://github.com/scipy/unuran.git
    git_rev: 81a1fd118b326880e00cc7d8989fb063782a6bdd
    folder: scipy/_lib/unuran
  # https://github.com/scipy/scipy/tree/v{{ version }}/scipy/sparse/linalg/_propack
  - git_url: https://github.com/scipy/PROPACK.git
    git_rev: 96f6800451372dd003e627bbfd732937ac0c685e
    folder: scipy/sparse/linalg/_propack/PROPACK

build:
  number: {{ build }}
  skip: true  # [py<39]
  # pypy on aarch/ppc is un(der)maintained and currently broken, see
  # https://github.com/conda-forge/pypy3.6-feedstock/issues/111
  skip: true  # [(aarch64 or ppc64le) and python_impl == "pypy"]

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - cython 0.29.35                         # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
    - pybind11                               # [build_platform != target_platform]
    - meson-python                           # [build_platform != target_platform]
    - cmake                                  # [build_platform != target_platform]
    - ninja                                  # [build_platform != target_platform]
    - pkg-config                             # [build_platform != target_platform]
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('fortran') }}              # [unix]
    # pythran code needs clang-cl on windows
    - clang                                  # [win]
    # use flang as fortran compiler on windows (uses clang driver)
    - flang                                  # [win]
    # use llvm linker for both of the above
    - lld                                    # [win]
  host:
    - compiler-rt                            # [win]
    - libblas
    - libcblas
    - liblapack
    - python
    - cython 0.29.35
    - meson-python
    - ninja
    - pkg-config
    - python-build
    - pybind11
    - pythran
    - numpy
    - pip

# the top-level build.{sh,bat} builds scipy, and then
# build-output.{sh,bat} installs the files
outputs:
  - name: scipy
    script: build-output.sh   # [not win]
    script: build-output.bat  # [win]
    version: {{ version }}
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        # only need these for the strong run exports
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}              # [unix]
      host:
        - libblas
        - libcblas
        - liblapack
        - python
        - cython 0.29.35
        - meson-python
        - ninja
        - pkg-config
        - python-build
        - pybind11
        - pythran
        - numpy
        - pip
      run:
        - python
        # see np_maxversion in https://github.com/scipy/scipy/blob/v{{ version }}/setup.py
        - {{ pin_compatible('numpy', upper_bound='1.28') }}
    test:
      requires:
        - pytest
      imports:
        - scipy
        # reference for public API is effectively
        # https://github.com/scipy/scipy/blob/main/scipy/_lib/tests/test_public_api.py
        - scipy.cluster
        - scipy.cluster.hierarchy
        - scipy.cluster.vq
        - scipy.constants
        - scipy.datasets
        - scipy.fft
        - scipy.fftpack
        - scipy.integrate
        - scipy.interpolate
        - scipy.io
        - scipy.io.arff
        - scipy.io.matlab
        - scipy.io.wavfile
        - scipy.linalg
        - scipy.linalg.blas
        - scipy.linalg.cython_blas
        - scipy.linalg.cython_lapack
        - scipy.linalg.interpolative
        - scipy.linalg.lapack
        - scipy.misc
        - scipy.ndimage
        - scipy.odr
        - scipy.optimize
        - scipy.signal
        - scipy.signal.windows
        - scipy.sparse
        - scipy.sparse.csgraph
        - scipy.sparse.linalg
        - scipy.spatial
        - scipy.spatial.distance
        - scipy.spatial.transform
        - scipy.special
        - scipy.stats
        - scipy.stats.contingency
        - scipy.stats.distributions
        - scipy.stats.mstats
        - scipy.stats.qmc
        - scipy.stats.sampling
      commands:
        # absence of tests (selection from test_folders_to_delete.txt)
        {% set test_folders = [
            "_lib/tests", "cluster/tests", "constants/tests", "datasets/tests",
            "fftpack/tests", "fft/tests", "integrate/tests", "interpolate/tests",
            "io/tests", "linalg/tests", "misc/tests", "ndimage/tests", "odr/tests",
            "optimize/tests", "signal/tests", "sparse/tests", "spatial/tests",
            "special/tests", "stats/tests"
        ] %}
        {% for each_folder in test_folders %}
        - test ! -d $SP_DIR/scipy/{{ each_folder }}                               # [unix]
        - if exist %SP_DIR%\scipy\{{ "\\".join(each_folder.split("/")) }} exit 1  # [win]
        {% endfor %}

        # absence of testing DSOs (selection from test_libraries_to_delete.txt)
        {% set test_libraries = [
            "_lib/_test_ccallback", "integrate/_test_multivariate", "io/_test_fortran",
            "ndimage/_ctest", "ndimage/_cytest", "special/_test_internal"
        ] %}
        {% set PY_ABI = "cpython-" ~ PY_VER.replace(".", "") %}                         # [unix and python_impl == "cpython"]
        {% set PY_ABI = "cp" ~ PY_VER.replace(".", "") %}                               # [win and python_impl == "cpython"]
        {% set PY_ABI = "pypy" ~ PY_VER.replace(".", "") ~ "-pp73" %}                   # [python_impl == "pypy"]
        {% set ARCH = "x86_64" if x86 else ("aarch64" if aarch64 else "powerpc64le")%}  # [linux]
        {% for each_lib in test_libraries %}
        - test ! -f $SP_DIR/scipy/{{ each_lib }}.{{ PY_ABI }}-{{ ARCH }}-linux-gnu.so                     # [linux]
        - test ! -f $SP_DIR/scipy/{{ each_lib }}.{{ PY_ABI }}-darwin.so                                   # [osx]
        - if exist %SP_DIR%\scipy\{{ "\\".join(each_lib.split("/")) }}.{{ PY_ABI }}-win_amd64.pyd exit 1  # [win]
        {% endfor %}

        # test that scipy.test raises an informative error
        - python -c "import scipy; throw_away_the_return_value = scipy.test()" > testlog
        - python -c "import sys; lines=open('testlog').readlines(); sys.exit(0 if any('conda-forge builds of' in x for x in lines) else 1)"
        # same for `pytest --pyargs scipy` (uses exit code that's neither 0 or 1 on win, which breaks piping)
        - (pytest --pyargs scipy || echo "failure was expected") > testlog   # [unix]
        - (pytest --pyargs scipy || if !ERRORLEVEL! neq 0 exit 0) > testlog  # [win]
        - python -c "import sys; lines=open('testlog').readlines(); sys.exit(0 if any('conda-forge builds of' in x for x in lines) else 1)"
        # ensure only one test is left (namely, our hint)
        - python -c "import sys; lines=open('testlog').readlines(); sys.exit(0 if any('======== 1 failed in ' in x for x in lines) else 1)"

about:
  home: http://www.scipy.org/
  license: BSD-3-Clause
  license_file: LICENSE.txt
  summary: Scientific Library for Python
  description: |
    SciPy is a Python-based ecosystem of open-source software for mathematics,
    science, and engineering.
  doc_url: http://www.scipy.org/docs.html
  dev_url: https://github.com/scipy/scipy

extra:
  recipe-maintainers:
    - andrsd
  feedstock-name: scipy
